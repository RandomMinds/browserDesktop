

var server = require "./server";

console.log(*server.getGeo());

var libde265 = require "libde265.js/lib/libde265";

libde265 = libde265 || window.libde265;

console.log(libde265);

var toUint8Array = function(parStr){
  var raw = window.atob(parStr);
  var rawLength = raw.length;
  var array = new Uint8Array(new ArrayBuffer(rawLength));

  var i;
  for(i = 0; i < rawLength; i++) {
    array[i] = raw.charCodeAt(i);
  }
  return array;    
};


var concatUint8 = function(parAr) {
  if (!parAr || !parAr.length){
    return new Uint8Array(0);
  };
  
  if (parAr.length === 1){
    return parAr[0];
  };
  
  var completeLength = 0;
  var i = 0;
  var l = parAr.length;
  for (i; i < l; ++i){
    completeLength += parAr[i].byteLength;
  };

  var res = new Uint8Array(completeLength);
  var filledLength = 0;

  for (i = 0; i < l; ++i){
    res.set(new Uint8Array(parAr[i]), filledLength);
    //res.set(parAr[i], filledLength);
    filledLength += parAr[i].byteLength;
  };

  return res;

};

var canvas = document.createElement('canvas');
document.body.appendChild(canvas)

var ctx = canvas.getContext("2d");
  
var bufferAr = [];

var busy = false;
var image_data;


  var decoder = new libde265.Decoder();
  decoder.set_image_callback(function(image) {
    //debugger;
    var w = image.get_width();
    var h = image.get_height();
    if (w != canvas.width || h != canvas.height || !image_data) {
        canvas.width = w;
        canvas.height = h;
        image_data = ctx.createImageData(w, h);
        var idata = image_data.data;
        for (var i = 0; i < w * h; i++) {
            idata[i * 4 + 3] = 255;
        };
    }

    image.display(image_data, function(display_image_data) {
      //debugger;
      ctx.putImageData(display_image_data, 0, 0);
    });
    //that._display_image(image);
    image.free();
  });

  var decode = function() {

    var err;
    //if (remaining === 0) {
    //    err = decoder.flush();
    //} else {
    var l = 4096;
    if (!bufferAr.length){
      busy = false;
      return;
    };
    //var tmp = concatUint8(bufferAr);
    bufferAr = [concatUint8(bufferAr)];
    
    var tmp = bufferAr[0];
    if (tmp.length < l){
      busy = false;
      return;
    };
    var byteLen = tmp.length;
    
    var buf = tmp.buffer;
    
    var tmp2 = new Uint8Array(buf, 0, l);
    
    var tmp3 = new Uint8Array(byteLen);
    tmp3.set(new Uint8Array(buf, l), 0);
    
    bufferAr = [tmp3];
    
    
    err = decoder.push_data(tmp2);
    
    
    if (!libde265.de265_isOK(err)) {
      debugger;
      console.log(err);
      console.log(libde265.de265_get_error_text(err));
      return;
    };


    decoder.decode(function(err) {
      switch(err) {
      case libde265.DE265_ERROR_WAITING_FOR_INPUT_DATA:
        busy = true;
        setTimeout(decode, 0);
        return;

      default:
        if (!libde265.de265_isOK(err)) {
          debugger;
          console.log(err);
          console.log(libde265.de265_get_error_text(err));
          return;
        };
      };

      busy = true;
      setTimeout(decode, 0);
      return;

      //decoder.free();
      //busy = false;
    });
  };


var _handle_onload = function() {
  if (busy){
    return;
  };

  busy = true;
  setTimeout(decode, 0);
};
        
        
        
var x = 0;
      
server.getStream({dataCallback: (parDataStr){
  console.log("x");
  x += 1;
  //debugger;
  bufferAr.push(toUint8Array(parDataStr));
  //if (x > 10){
    x = 0;
    _handle_onload();
  //};
  //player.decode(bin);
  //decodeRaw(bin);
}});


/*player = new libde265.RawPlayer(video);
        player.set_status_callback(function(msg, fps) {
            player.disable_filters(true);
            switch (msg) {
            case "loading":
                status.innerHTML = "Loading movie...";
                break;
            case "initializing":
                status.innerHTML = "Initializing...";
                break;
            case "playing":
                status.innerHTML = "Playing...";
                break;
            case "stopped":
                status.innerHTML = "";
                break;
            case "fps":
                status.innerHTML = Number(fps).toFixed(2) + " fps";
                break;
            default:
                status.innerHTML = msg;
            }
        });
        player.playback(VIDEO_URL);
  */            
              
              
return;


  
var Player = require "Broadway/Player/Player";

var player = new Player({
  useWorker: false,
  workerFile: "Broadway/Player/Decoder.js"
});

document.body.appendChild(player.canvas);



var decodeRaw = function(data){
  if (!(data && data.length)){
    return;
  };
  
  var hit = function(subarray){
    if (subarray){
      bufferAr.push(subarray);
    };
    player.decode( concatUint8(bufferAr) );
    console.log("paint frame");
    bufferAr = [];
  };

  var startOffset = 0;
  var b = 0;
  var lastStart = 0;
  
  var l = data.length;
  var zeroCnt = 0;
  
  for (b = 0; b < l; ++b){
    if (data[b] === 0){
      zeroCnt++;
    }else{
      if (data[b] == 1){
        if (zeroCnt >= 3){
          if (lastStart < b - 3){
            hit(data.subarray(lastStart, b - 3));
            lastStart = b - 3;
            //startOffset = b + 1;
          }else if (bufferAr.length){
            hit();
          }
        };
      };
      zeroCnt = 0;
    };
  };
  if (lastStart < data.length){
    bufferAr.push(data.subarray(lastStart));
  };

}


server.getStream({dataCallback: (parDataStr){
  console.log("x");
  //debugger;
  var bin = toUint8Array(parDataStr);
  //player.decode(bin);
  decodeRaw(bin);
}});
